/*  Filename   :     MDBServer.cpp
 *  Creator    :     Clinton Stimpson
 *
 *  Date       :     10 Jan 2002
 *
 *  Owner      :     Clinton Stimpson
 *
 *  Description:     The MDBServer accepts connections from an
 *                   MDBClient.  The MDBServer creates objects
 *                   and returns interfaces to those objects.
 *
 *                   When new objects are added to the library,
 *                   MDBComponentFactory::QueryInterface(...)
 *                   is the only part of this MDBServer that needs
 *                   to be updated
 */


#include <list>
#include "MDBVerde.hpp"

#ifndef WIN32
  #define MDB_EXPORT extern "C"
#else
  #define MDB_EXPORT extern "C" __declspec(dllexport)
#endif


// MDBComponentFactory class allows for returning any one of
// multiple available interfaces from any object within this
// shared library


// This library can have multiple objects, and each object
// can have multiple interfaces.
// This component factory takes care of creating the object
// that the requested interface belongs to

class MDBComponentFactory : public MDBUnknownInterface
{
public:
   MDBComponentFactory(){};
   virtual ~MDBComponentFactory(){};
   // returns the interface requested from an object
   virtual int MDB_IDECL QueryInterface( const MDBuuid&,
         MDBUnknownInterface** );
   // keep track of the objects this component factory creates
   static std::list<MDBUnknownInterface*> objects_in_use;
};

// the list that keeps track of all the interfaces generated by this server
std::list<MDBUnknownInterface*> MDBComponentFactory::objects_in_use;


// this QueryInterface function is supposed to create an instance of the object
// that contains the interface requested
//
// note: the object is not the same as the interface, therefore
// we ask the object for the interface that was requested
//

int MDB_IDECL MDBComponentFactory::QueryInterface( const MDBuuid& uuid, MDBUnknownInterface** iface )
{
   // this is an unknown interface that was requested
   // if wanted, we could provide a default interface
   // if IDD_MDBUnknown is specified
   if(uuid == IDD_MDBUnknown)
      return 0;
   // IDD_MDBVerde interface was requested
   // create an MDBVerde object and have it return the interface
   // requested
   else if(uuid == IDD_MDBVerde)
   {
      MDBVerde* mdb = new MDBVerde;
      // if the object does not contain the interface requested, delete the object
      if(!mdb->QueryInterface(uuid, iface))
      {
         delete mdb;
	 return 0;
      }
      return 1;
   }
   else
      return 0;
   
}

// returns the interface version
MDB_EXPORT const char* MDB_CDECL Version()
{
   return MDB_INTERFACE_VERSION;
}


// Initialize function is accessed by the MDBClient when asking for interfaces
MDB_EXPORT void MDB_CDECL GetInterface(MDBuuid& interface_requested, MDBUnknownInterface** iface)
{
   // create an instance of our component factory
   MDBComponentFactory server;
   // ask the component factory to give us the interface we want
   server.QueryInterface(interface_requested, iface);
   // if the interface existed, put it on our list
   if(iface && *iface)
      MDBComponentFactory::objects_in_use.push_front(*iface);
}


// DeInitialize function is accessed by the MDBClient when disconnecting from this library
// this will clean everything up prior to a disconnection
// from this library
MDB_EXPORT void MDB_CDECL DeInitialize()
{
   // delete all instances of objects
   while(MDBComponentFactory::objects_in_use.size())
   {
      MDBUnknownInterface* iface = 
         MDBComponentFactory::objects_in_use.front();
      MDBComponentFactory::objects_in_use.pop_front();
      if(iface)
         delete iface;
   }
}

// ReleaseInterface function is accessed by the MDBClient when deleting an interface

// ReleaseInterface will delete this interface
MDB_EXPORT void MDB_CDECL ReleaseInterface(MDBUnknownInterface* iface)
{
   if(!iface)
      return;
   // remove this object from our list and delete it
   MDBComponentFactory::objects_in_use.remove(iface);
   delete iface;
}
